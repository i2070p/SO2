// SO2 IS1 211A LAB05
// Patryk Siemi≈Ñski
// psieminski@wi.zut.edu.pl

#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>

int life_time;
int proc2,proc3;
int i=0;
int created=0, shutted=0,pid;
int timeS,elapsed;


void locksignals();
void unlocksignals();
void s_ctrlz(int);
void s_ctrlc(int);
void s_get1(int,siginfo_t*, void*);
void s_get2(int,siginfo_t*, void*);
void s_sum1(int);
void s_sum2(int);
void s_wait(int);

int main(int argc, char** argv) {

	struct sigaction ctrlz,ctrlc,sp2,sp3,swait;

	sp2.sa_flags = sp3.sa_flags = SA_SIGINFO; 

	ctrlz.sa_handler = s_ctrlz;
	sigaction(SIGTSTP, &ctrlz, NULL);

	ctrlc.sa_handler = s_ctrlc;
	sigaction(SIGINT, &ctrlc, NULL);

	sp2.sa_sigaction = s_get1;
	sigaction(SIGUSR1, &sp2, NULL);

	sp3.sa_sigaction = s_get2;
	sigaction(SIGUSR2, &sp3, NULL);

	swait.sa_handler=s_wait;
	sigaction(SIGTERM,&swait,NULL);

	if (argc<2)
	{
		printf("Nie podano czasu trwania procesu macierzystego.\n");
		exit(-1);
	}
	else
	{
		life_time=0;
	}

	locksignals();

	proc2=fork();
	if (proc2==-1)
	{
		printf("Blad. Nie udalo sie utworzyc procesu drugiego.");
	}
	else if (proc2==0)
	{
		struct sigaction su1;
		su1.sa_handler=s_sum1;
		sigaction(SIGTERM,&su1,NULL);
		locksignals();
		timeS=(int)time(NULL);
		while(1)
		{
			if ((int)time(NULL)-timeS>=1)
			{
				i++;
				kill(getppid(), SIGUSR1);
				timeS=(int)time(NULL);
			}
		}
	}
	else
	{
		created++;
		proc3=fork();
		if (proc3==-1)
		{
			printf("Blad. Nie udalo sie utworzyc procesu trzeciego.");
		}
		else if (proc3==0)
		{
			struct sigaction su2;
			su2.sa_handler=s_sum2;
			sigaction(SIGTERM,&su2,NULL);
			locksignals();
			timeS=(int)time(NULL);
			while(1)
			{
				if ((int)time(NULL)-timeS>=3)
				{
					i++;
					kill(getppid(), SIGUSR2);
					timeS=(int)time(NULL);
				}
			}
		}
		else
		{
			created++;
			timeS=(int)time(NULL);
			while((int)time(NULL)-timeS<atoi(argv[1]))
			{

			}
			kill(0,SIGTERM);
		}
	}

	unlocksignals();

	return (0);

}

void locksignals()
{
	sigset_t lock;
	sigemptyset(&lock);
	sigaddset(&lock, SIGTSTP); 
	sigaddset(&lock, SIGINT); 
	sigprocmask(SIG_SETMASK, &lock, NULL); 
};

void unlocksignals()
{
	sigset_t unlock;
	sigemptyset(&unlock);
	sigaddset(&unlock, SIGTSTP); 
	sigaddset(&unlock, SIGINT); 
	sigprocmask(SIG_UNBLOCK, &unlock, NULL); 
};

void s_ctrlz(int signal)
{
	printf("\nPojawil sie sygnal CTRL+Z.\n");
};

void s_ctrlc(int signal)
{
	printf("\nPojawil sie sygnal CTRL+C.\n");
};

void s_get1(int signal, siginfo_t* signal_info, void* null)
{
	printf("Otrzymano sygnal SIGUSR1 od procesu %d\n",signal_info->si_pid);
}

void s_get2(int signal, siginfo_t* signal_info, void* null)
{
	printf("Otrzymano sygnal SIGUSR2 od procesu %d\n",signal_info->si_pid);
}

void s_sum1(int signal)
{
	printf("Wyslano lacznie %d sygnalow SIGUSR1\n",i);
	exit(0);
}

void s_sum2(int signal)
{
	printf("Wyslano lacznie %d sygnalow SIGUSR2\n",i);
	exit(0);
}

void s_wait(int signal)
{
	while(shutted!=created)
	{
		pid=wait(NULL);
		if (pid==proc2 || pid==proc3) shutted++;
	}
	printf("\nZamknieto potomkow.\n");
}
