// SO2 IS1 211A LAB09
// Patryk Siemi≈Ñski
// psieminski@wi.zut.edu.pl

#include <stdio.h> 
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/types.h>

int threads;
int* chPerThread;
int tmp = 0;
char lookForIt;
char* fileName;
char** textForProc;
int sockets[2];
int** socketsArr;
char** buffArr;
char* buf;
int child;

int count(char* lookIn, int length)
{
	int found = 0;
	int i = 0;
	for(i = 0; i <length; i++)
	{
		if(lookIn[i] == lookForIt)
		{
			found++;
		}
	}

	return found;
}

int main(int argc, char** argv) {

	if (argc<4)
	{
		printf("Nie podano odpowiedniej ilosci parametrow.\n");
		exit(0);
	}
	else
	{
		fileName=argv[1];
		lookForIt=argv[2][0];
		threads=atoi(argv[3]);
	}

	if (socketpair(AF_UNIX, SOCK_STREAM, 0, sockets) < 0) {
		printf("Nie udalo sie utworzyc pary socketu\n");
		exit(1);
	}

	printf("Zostanie utworzonych %d watkow szukajacych litery %c w pliku o nazwie %s\n",threads,lookForIt,fileName);

	FILE * pFile;
	int lSize;
	size_t result;

	pFile = fopen ( fileName , "rb" );
	if (pFile==NULL) {printf("Couldn't open file %s\n",fileName); exit (1);}

	fseek (pFile , 0 , SEEK_END);
	lSize = ftell (pFile);
	rewind (pFile);

	tmp = lSize;
	chPerThread = malloc (sizeof(int)*threads);

	int currentThread = 0;

	while(tmp>0)
	{
		chPerThread[currentThread]++;
		if (++currentThread==threads) currentThread=0;
		tmp--;
	}

	textForProc = malloc (sizeof(char*)*threads);

	socketsArr = malloc (sizeof(int*)*threads);
	buffArr = malloc (sizeof(char*)*threads);
	int i = 0;
	for (i=0; i<threads; i++)
	{
		textForProc[i] = malloc (sizeof(char)*chPerThread[i]);
		fread(textForProc[i],1,chPerThread[i],pFile);
		socketsArr[i] = malloc (sizeof(int)*2);

		if (socketpair(AF_UNIX, SOCK_STREAM, 0, socketsArr[i]) < 0) {
		printf("Nie udalo sie utworzyc pary socketu\n");
		exit(1);
	}
	}

	int created = 0;
	while(threads>created)
	{
		if ((child = fork()) == -1)
		{
			printf("Blad utworzenia procesu\n");
		}
		else if (child) {     // Wyslanie pakietu od rodzica do dziecka 
			created++;

		}
		else
		{
			threads=0;
		}
	}

	/*
		if ((child = fork()) == -1)
		{
			printf("Blad utworzenia procesu\n");
		}
		else if (child) {     // Wyslanie pakietu od rodzica do dziecka 
			close(sockets[0]);
			if (write(sockets[1], textForProc[0], chPerThread[0]) < 0)
			{
				printf("Blad wysylania wiadomosci\n");
			}
			close(sockets[1]);

		} else {     // Odebranie wiadomosci od rodzica 
			close(sockets[1]);
			buf = malloc (sizeof(char)*chPerThread[0]);
			if (read(sockets[0], buf, chPerThread[0], 0) < 0)
			{
				printf("Blad odbierania wiadomosci\n");
			}
			printf("%s\n", buf);
			close(sockets[0]);
			int foundCh = count(buf,chPerThread[0]);
			printf("Znaleziono %d znakow %c\n",foundCh,lookForIt);
		}
	*/

	return (0);

}

