// SO2 IS1 211A LAB06
// Patryk Siemiński
// psieminski@wi.zut.edu.pl
/*
uordblks - odnosi się do całkowitego zaalokowanego obszaru pamięci - ilość w bajtach. Alokowanie za pomocą funkcji malloc.
hblkhd - odnosi się do pamięci zaalokowanej w zmapowanych obszarach pamięci - ilość w bajtach. Alokowane za pomocą funkcji mmap. Gdy funkcją malloc zaalokujemy duże bloki (testowałem ok 130 MB) zalokowana była pamięć mapowana lub najpierw ta użytkowa następnie mapowana.
*/

#include <stdio.h> 
#include <malloc.h>

static void my_init_hook(void); 
static void *my_malloc_hook(size_t, const void *);

static void *(*old_malloc_hook)(size_t, const void *); 

void (*__malloc_initialize_hook) (void) = my_init_hook; 

int block_size=0;
int block_count=0;
int i=0;

int main(int argc, char** argv) {

	if (argc<3)
	{
		printf("Nie podano odpowiedniej ilosci parametrow.\n");
		exit(-1);
	}
	else
	{
		block_size=atoi(argv[1]);
		block_count=atoi(argv[2]);
	}
	printf("Zostanie zaalokowanych %d blokow o rozmiarach %d kB\n",block_count,block_size);
	
	char* blocks[block_count];
	//char** blocks = malloc(block_count*sizeof(char*));

	for (i=0; i<block_count; i++)
	{
		blocks[i] = malloc (1020 * block_size * sizeof(char));
	}
	for (i=0; i<block_count; i++)
	{
		free(blocks[i]);
		printf("Zwolniono blok %d\n",i+1);
	}

	return (0);

}

static void my_init_hook(void) 
{ 
	old_malloc_hook = __malloc_hook; 
	__malloc_hook = my_malloc_hook; 
}

static void * my_malloc_hook(size_t size, const void *caller) 
{
	struct mallinfo my_info = mallinfo();
	int total_allocated = my_info.uordblks;
	int total_mapped = my_info.hblkhd;

	void *result; 

	__malloc_hook = old_malloc_hook; 

	result = malloc(size); 
	my_info = mallinfo();

	old_malloc_hook = __malloc_hook; 
	
	__malloc_hook = my_malloc_hook; 

	printf("UORDBLKS before malloc : %d, after malloc : %d\n",total_allocated, my_info.uordblks);
	printf("HBLKHD before malloc : %d, after malloc : %d\n",total_mapped, my_info.hblkhd);
	return result;  
}
